// this is still work in progress
PROPERTIES_START // Properties
ResetFix ("", Float) = 0
[HideInInspector]Foldout_RenderingOptions ("Rendering Options", Float) = 0
    _Cutoff ("Alpha Cuttoff", Range(0.001, 1)) = 0.5
    _CutoutSharpness ("Sharpness", Range(1, 0.0001)) = 0.0001
        

    [HideInInspector]Foldout_SurfaceInputs ("Surface Inputs", Float) = 1
    _MainTex ("Albedo", 2D) = "white" {}
    _Color ("Color", Color) = (1,1,1,1)
    _AlbedoSaturation ("Saturation", Float) = 1



    _Metallic ("Metallic", Range(0,1)) = 0
    _Glossiness ("Smoothness", Range(0,1)) = 0.5
    _Reflectance ("Reflectance", Range(0.0, 1.0)) = 0.5

    _MetallicGlossMap("Mask Map", 2D) = "white" {}
    _MetallicRemapping ("Metallic Remap", Vector) = (0,1,0,1)
    _GlossinessRange ("Smoothness Range", Vector) = (0,1,0,1)
    _GlossinessRemapping ("Smoothness Remap", Vector) = (0,1,0,1)
    _OcclusionStrength ("Occlusion", Range(0,1)) = 1



    [Normal] _BumpMap ("Normal Map", 2D) = "bump" {}
    _BumpScale ("Scale", Float) = 1
    
	[Toggle(_SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A)] _SmoothnessAlbedoAlpha ("Smoothness Albedo Alpha", Int) = 0
	_ParallaxMap ("Height Map", 2D) = "white" {}
    _Parallax ("Scale", Range (0, 0.2)) = 0.02
    _ParallaxOffset ("Parallax Offset", Range(-1, 1)) = 0
    [IntRange] _ParallaxSteps ("Steps", Range(1, 32)) = 16


    _SpecularOcclusion ("Specular Occlusion", Range(0,1)) = 0


    [HideInInspector]Foldout_Emission ("Emission", Float) = 0

    [Toggle(_EMISSION)] _EmissionToggle ("Enable Emission", Int) = 0

    _EmissionMap ("Emission Map", 2D) = "white" {}
    [HDR] _EmissionColor ("Emission Color", Color) = (0,0,0)
    [HideInInspector] _EmissionColorLDR ("Emission Color", Color) = (1,1,1)
    [ToggleUI] _UseEmissionIntensity ("Use Emission Intensity", Int) = 0
    _EmissionIntensity ("Intensity", Float) = 1

    [Enum(UV0, 0, UV1, 1, UV2, 2, UV3, 3)] _EmissionMap_UV ("UV", Int) = 0
    _EmissionMultBase ("Multiply Base", Range(0,1)) = 0
    _EmissionGIMultiplier ("GI Multiplier", Float) = 1

    [Toggle(_AUDIOLINK_EMISSION)] _AudioLinkEmissionToggle ("Audio Link", Float) = 0
    [Enum(Bass, 0, Low Mids, 1, High Mids, 2, Treble, 3)] _AudioLinkEmissionBand ("Band", Int) = 0

    [HideInInspector]Foldout_DetailFoldout ("Detail Inputs", Float) = 0
    [Enum(Overlay, 0, Screen, 1, Multiply X2, 2, Replace, 3)] _DetailBlendMode ("Blend Mode", Int) = 0

    _DetailMask ("Blend Mask", 2D) = "white" {}
    [Enum(UV0, 0, UV1, 1, UV2, 2, UV3, 3)] _DetailMask_UV ("UV", Int) = 0


    _DetailAlbedoMap ("Albedo", 2D) = "white" {}
    _DetailColor ("Color", Color) = (1,1,1,1)
    [Normal]_DetailNormalMap ("Normal Map", 2D) = "bump" {}
    _DetailNormalScale ("Scale", Float) = 1

    _DetailMetallic ("Metallic", Range(0,1)) = 0
    _DetailGlossiness ("Smoothness", Range(0,1)) = 0.5

    [Enum(UV0, 0, UV1, 1, UV2, 2, UV3, 3)] _DetailMap_UV ("UV", Int) = 0
    [Toggle(_DECAL)] _IsDecal ("Use as Decal", Float) = 0


    _DetailHeightBlend ("Height Blend", 2D) = "white" {}
    _HeightBlend ("Blend", Float) = 5
    [Toggle] _HeightBlendInvert ("Blend Invert", Float) = 0

    [HideInInspector]Foldout_WindFoldout ("Wind", Float) = 0
    [Toggle(_WIND)] _WindToggle ("Enable Wind", Float) = 0
    _WindNoise ("Noise RGB", 2D) = "black" {}
    _WindScale ("Noise Scale", Float) = 0.02
    [PowerSlider(2)] _WindSpeed ("Speed", Range(0,5)) = 0.05
    _WindIntensity ("Intensity XYZ", Vector) = (0.1,0.1,0.1,0)

    [HideInInspector]Foldout_AvancedSettings ("Additional Settings", Float) = 0

    [ToggleOff(_SPECULARHIGHLIGHTS_OFF)] _SpecularHighlights("Specular Highlights", Float) = 1
    [ToggleOff(_GLOSSYREFLECTIONS_OFF)] _GlossyReflections ("Reflections", Float) = 1
    //[Toggle(FORCE_SPECCUBE_BOX_PROJECTION)] _ForceBoxProjection ("Force Box Projection", Float) = 0

    [PowerSlider(2)] _specularAntiAliasingVariance ("Variance", Range(0.0, 1.0)) = 0.15
    [PowerSlider(2)] _specularAntiAliasingThreshold ("Threshold", Range(0.0, 1.0)) = 0.1

    [Toggle(LTCGI_DIFFUSE_OFF)] _LTCGI_DIFFUSE_OFF("LTCGI Disable Diffuse", Int) = 0
    //[Toggle(_LIGHTMAPPED_SPECULAR)] _LightmappedSpecular ("Lightmapped Specular ", Int) = 0
    [Toggle(_BICUBICLIGHTMAP)] _BicubicLightmap ("Bicubic Lightmap", Float) = 0

    [ToggleOff(BAKERY_SHNONLINEAR_OFF)] _BAKERY_SHNONLINEAR ("Non-linear Lightmap SH", Float) = 1
    [Toggle(NONLINEAR_LIGHTPROBESH)] _NonLinearLightProbeSH ("Non-linear Light Probe SH", Int) = 0
    _AnisotropyMap ("Anisotropy", 2D) = "black" {}
    _Anisotropy ("", Range(-1.0, 1.0)) = 0
PROPERTIES_END


DEFINES_FORWARDBASE_START
    //#pragma shader_feature_local FORCE_SPECCUBE_BOX_PROJECTION
    // #pragma shader_feature_local _LIGHTMAPPED_SPECULAR //TODO
    #pragma shader_feature_local _EMISSION

    #pragma shader_feature_local _PARALLAXMAP
    #pragma shader_feature_local _MASKMAP
    #pragma shader_feature_local _NORMALMAP
    #pragma shader_feature_local _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
    #pragma shader_feature_local _ _DETAILBLEND_SCREEN _DETAILBLEND_MULX2 _DETAILBLEND_LERP
    #pragma shader_feature_local _DETAIL_BLENDMASK
    #pragma shader_feature_local _DETAIL_ALBEDOMAP
    #pragma shader_feature_local _DETAIL_NORMALMAP
    #pragma shader_feature_local _DETAIL_HEIGHTBLEND
    #pragma shader_feature_local _DECAL
    #pragma shader_feature_local _AUDIOLINK_EMISSION
    #pragma shader_feature_local _ANISOTROPY

    #pragma shader_feature_local _WIND
DEFINES_FORWARDBASE_END

DEFINES_FORWARDADD_START
    #pragma shader_feature_local _PARALLAXMAP
    #pragma shader_feature_local _MASKMAP
    #pragma shader_feature_local _NORMALMAP
    #pragma shader_feature_local _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
    #pragma shader_feature_local _ _DETAILBLEND_SCREEN _DETAILBLEND_MULX2 _DETAILBLEND_LERP
    #pragma shader_feature_local _DETAIL_BLENDMASK
    #pragma shader_feature_local _DETAIL_ALBEDOMAP
    #pragma shader_feature_local _DETAIL_NORMALMAP
    #pragma shader_feature_local _DETAIL_HEIGHTBLEND
    #pragma shader_feature_local _DECAL
    #pragma shader_feature_local _ANISOTROPY

    #pragma shader_feature_local _WIND
DEFINES_FORWARDADD_END


DEFINES_SHADOWCASTER_START
    #pragma shader_feature_local _WIND
DEFINES_SHADOWCASTER_END

DEFINES_META_START
    #pragma shader_feature_local _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
    #pragma shader_feature_local _EMISSION
    #pragma shader_feature_local _ _DETAILBLEND_SCREEN _DETAILBLEND_MULX2 _DETAILBLEND_LERP
    #pragma shader_feature_local _DETAIL_BLENDMASK
    #pragma shader_feature_local _DETAIL_ALBEDOMAP
    #pragma shader_feature_local _DETAIL_HEIGHTBLEND
    #pragma shader_feature_local _DECAL
DEFINES_META_END

DEFINES_START // Keywords, Defines
    // #define VARYINGS_NEED_TEXCOORD0
    //#define VARYINGS_NEED_TEXCOORD1
    //#define VARYINGS_NEED_TEXCOORD2
    //#define VARYINGS_NEED_TEXCOORD3
    //#define VARYINGS_NEED_COLOR
    #define VARYINGS_NEED_INTERP0
    #define VARYINGS_NEED_INTERP1

    #ifdef _PARALLAXMAP
        #define VARYINGS_NEED_INTERP2
    #endif
    //#define VARYINGS_NEED_INTERP3
    //#define VARYINGS_NEED_INTERP4
    #define VARYINGS_NEED_CULLFACE
    // #pragma skip_variants _GLOSSYREFLECTIONS_OFF
    // #pragma skip_variants _SPECULARHIGHLIGHTS_OFF

    #define ATTRIBUTES_NEED_TEXCOORD0
    #define ATTRIBUTES_NEED_TEXCOORD1
    #define ATTRIBUTES_NEED_TEXCOORD2
    #define ATTRIBUTES_NEED_TEXCOORD3
DEFINES_END


CBUFFER_START // declare all Material properties excluding textures
    float4 _MainTex_ST;
    half4 _Color;
    half3 _EmissionColor;

    float4 _EmissionMap_ST; uint _EmissionMap_UV;

    half _Cutoff;
    half _Glossiness;
    half2 _GlossinessRemapping;
    half2 _GlossinessRange;
    half2 _MetallicRemapping;
    half _Reflectance;
    half _BumpScale;
    half _Metallic;
    half _OcclusionStrength;
    half _AlbedoSaturation;

    half _HeightBlend;
    half _HeightBlendInvert;

    half _EmissionMultBase;
    half _EmissionGIMultiplier;

    float _ParallaxOffset;
    float _Parallax;
    uint _ParallaxSteps;
    float4 _ParallaxMap_TexelSize;
    uint _DetailMap_UV;
    uint _DetailMask_UV;
    float4 _DetailMask_ST;
    half4 _DetailColor;
    float4 _DetailAlbedoMap_ST;
    half _DetailNormalScale;

    half _DetailMetallic;
    half _DetailGlossiness;

    half _Anisotropy;
    uint _AudioLinkEmissionBand;
CBUFFER_END


CODE_START

    TEXTURE2D(_MainTex);
    SAMPLER(sampler_MainTex);
    TEXTURE2D(_MetallicGlossMap);
    SAMPLER(sampler_MetallicGlossMap);
    TEXTURE2D(_BumpMap);
    SAMPLER(sampler_BumpMap);

    TEXTURE2D(_DetailHeightBlend);
    TEXTURE2D(_EmissionMap);
    SAMPLER(sampler_EmissionMap);
    TEXTURE2D(_ParallaxMap);
    SAMPLER(sampler_ParallaxMap);

    TEXTURE2D(_DetailMask);
    SAMPLER(sampler_DetailMask);

    TEXTURE2D(_DetailAlbedoMap);
    SAMPLER(sampler_DetailAlbedoMap);
    TEXTURE2D(_DetailNormalMap);
    SAMPLER(sampler_DetailNormalMap);
    TEXTURE2D(_AnisotropyMap);
    SAMPLER(sampler_AnisotropyMap);



    // Modify attributes before the VertexDescription
    #define USE_MODIFYATTRIBUTES
    void ModifyAttributes(inout Attributes attributes)
    {

    }

    // VertexDescription:
    // Transform VertexPosition, VertexNormal, VertexTangent in World Space
    #define USE_VERTEXDESCRIPTION
    void VertexDescriptionFunction(Attributes attributes, inout VertexDescription description)
    {
        
    }

    // Modify varyings at the end
    #define USE_MODIFYVARYINGS
    void ModifyVaryings(Attributes attributes, VertexDescription description, inout Varyings varyings)
    {
        varyings.interp0 = float4(attributes.uv0.xy, attributes.uv1.xy);
        varyings.interp1 = float4(attributes.uv2.xy, attributes.uv3.xy);

        #ifdef _PARALLAXMAP
            varyings.interp0
        #endif
    }

    #define GRAYSCALE float3(0.2125, 0.7154, 0.0721)
#ifdef _PARALLAXMAP
    #include "Packages/com.z3y.shaders/ShaderLibrary/Parallax.hlsl"
#endif
    // SurfaceDescription:
    // Albedo, Normal, Metallic, Emission, Smoothness, Occlusion
    // Alpha, AlphaClipThreshold, Reflectance
    #define USE_SURFACEDESCRIPTION
    void SurfaceDescriptionFunction(Varyings IN, inout SurfaceDescription surface)
    {
        float4 mainColor = _Color;
        float4 mainTextureST = _MainTex_ST;
        float2 mainUV = IN.interp0.xy * mainTextureST.xy + mainTextureST.zw;

        float2 uvs[] = { IN.interp0.xy, IN.interp0.zw, IN.interp1.xy, IN.interp1.zw };

        #ifdef _PARALLAXMAP
            float2 parallaxOffset = ParallaxOcclusionMapping(_Parallax, mainUV, i.viewDirTS, _ParallaxMap, sampler_ParallaxMap, _ParallaxMap_TexelSize, _ParallaxSteps, _ParallaxOffset);
            mainUV += parallaxOffset;
        #endif

        half4 mainTexture = _MainTex.Sample(sampler_MainTex, mainUV);

        mainTexture.rgb = lerp(dot(mainTexture.rgb, GRAYSCALE), mainTexture.rgb, _AlbedoSaturation);

        mainTexture *= mainColor;

        surface.Albedo = mainTexture.rgb;

        #ifdef _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
            surface.Alpha = mainColor.a;
        #else
            surface.Alpha = mainTexture.a;
        #endif
        

        surface.Reflectance = _Reflectance;

        #ifdef _MASKMAP
            half4 maskMap = _MetallicGlossMap.Sample(sampler_MetallicGlossMap, mainUV);
            surface.Smoothness = 1.0 - RemapMinMax(maskMap.a, _GlossinessRange.x, _GlossinessRange.y);
            surface.Smoothness = RemapInverseLerp(surface.Smoothness, _GlossinessRemapping.x, _GlossinessRemapping.y);
            surface.Metallic = RemapMinMax(maskMap.r, _MetallicRemapping.x, _MetallicRemapping.y);
            surface.Occlusion = lerp(1.0, maskMap.g, _OcclusionStrength);
        #else
            surface.Smoothness = 1.0 - _Glossiness;
            surface.Metallic = _Metallic;
            surface.Occlusion = 1.0;
        #endif

        #ifdef _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
            surface.Smoothness = 1.0 - RemapMinMax(mainTexture.a, _GlossinessRange.x, _GlossinessRange.y);
            surface.Smoothness = RemapInverseLerp(surface.Smoothness, _GlossinessRemapping.x, _GlossinessRemapping.y);
        #endif

    #ifdef _NORMALMAP
        half4 normalMap = _BumpMap.Sample(sampler_BumpMap, mainUV);
        surface.Normal = UnpackNormalScale(normalMap, _BumpScale);
    #endif

        #ifdef _EMISSION
            half3 emissionColor = _EmissionColor;
            surf.emission = emissionColor;
            surf.emission = lerp(surf.emission, surf.emission * surface.Albedo, _EmissionMultBase);

            float2 emissionTileOffset = uvs[_EmissionMap_UV] * _EmissionMap_ST.xy + _EmissionMap_ST.zw;
            surf.emission *= _EmissionMap.Sample(sampler_EmissionMap, emissionTileOffset);

                
            #ifdef _AUDIOLINK_EMISSION
                surf.emission *= AudioLinkLerp(uint2(1, _AudioLinkEmissionBand)).r;
            #endif
        #endif


        #ifdef UNITY_PASS_META
            surf.emission *= _EmissionGIMultiplier;
        #endif


        float2 detailUV = uvs[_DetailMap_UV].xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
        float2 detaildx = ddx(detailUV);
        float2 detaildy = ddy(detailUV);
        
        half detailMask = 1;
        #ifdef _DETAIL_BLENDMASK
            float2 detailMaskUV = uvs[_DetailMask_UV].xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
            detailMask = _DetailMask.Sample(sampler_DetailMask, detailMaskUV);
        #endif

        #ifdef REQUIRE_COLOR
            detailMask *= i.vertexColor.r;
        #endif


        #ifdef _DETAIL_HEIGHTBLEND
            half heightBlend = _DetailHeightBlend.Sample(sampler_MainTex, mainUV);
            detailMask *= saturate(heightBlend * heightBlend * _HeightBlend);
            detailMask = _HeightBlendInvert ? detailMask : 1.0f - detailMask;
        #endif

        #ifdef _DECAL
        UNITY_BRANCH
        if (!any(abs(detailUV - 0.5f) > 0.5f))
        {
        #endif
        

        #ifdef _DETAIL_ALBEDOMAP

            half4 sampledDetailAlbedo = _DetailAlbedoMap.SampleGrad(sampler_DetailAlbedoMap, detailUV, detaildx, detaildy) * _DetailColor;

            detailMask *= sampledDetailAlbedo.a;
                
            #if defined(_DETAILBLEND_SCREEN)
                surface.Albedo = lerp(surface.Albedo, BlendMode_Screen(surface.Albedo, sampledDetailAlbedo.rgb), detailMask);
            #elif defined(_DETAILBLEND_MULX2)
                surface.Albedo = lerp(surface.Albedo, BlendMode_MultiplyX2(surface.Albedo, sampledDetailAlbedo.rgb), detailMask);
            #elif defined(_DETAILBLEND_LERP)
                surface.Albedo = lerp(surface.Albedo, sampledDetailAlbedo.rgb, detailMask);
            #else // default overlay
                surface.Albedo = lerp(surface.Albedo, BlendMode_Overlay_sRGB(surface.Albedo, sampledDetailAlbedo.rgb), detailMask);
            #endif

            
        #endif

        #ifdef _DETAIL_NORMALMAP
            float4 detailNormalMap = _DetailNormalMap.SampleGrad(sampler_DetailNormalMap, detailUV, detaildx, detaildy);
            float3 detailNormal = UnpackNormalScale(detailNormalMap, _DetailNormalScale);
            #if defined(_DETAILBLEND_LERP)
                surface.Normal = lerp(surface.Normal, detailNormal, detailMask);
            #else
                surface.Normal = lerp(surface.Normal, BlendNormals(surface.Normal, detailNormal), detailMask);
            #endif
        #endif

        #ifdef _DETAILBLEND_LERP
            
            half detailRoughness = 1.0f - _DetailGlossiness;
            half detailMetallic = _DetailMetallic;
            half detailOcclusion = 1.0f;

            surface.Smoothness = lerp(surface.Smoothness, detailRoughness, detailMask);
            surface.Metallic = lerp(surface.Metallic, detailMetallic, detailMask);
            surface.Occlusion = lerp(surface.Occlusion, detailOcclusion, detailMask);

        #endif

        #ifdef _DECAL
        }
        #endif

        #ifdef _ANISOTROPY
        {
            half4 anisotropyMap = _AnisotropyMap.Sample(sampler_AnisotropyMap, mainUV);
            surf.anisotropyTangent = UnpackNormalmapAG(anisotropyMap.ag);
            surf.anisotropyDirection = _Anisotropy * anisotropyMap.r;
        }
        #endif


        surface.Smoothness = 1.0f - surface.Smoothness; // used to be roughness in the old shader
    }

CODE_END