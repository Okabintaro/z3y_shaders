PROPERTIES_START
    _Cutoff ("Alpha Cuttoff", Range(0.001, 1)) = 0.5
    _CutoutSharpness ("Cutoff Sharpness", Range(1, 0.0001)) = 0.0001
    
    [MainTexture] [NoScaleOffset] [ExtraProperty] _MainTex ("Albedo", 2D) = "white" {}
    [MainColor] _Color ("Color", Color) = (1,1,1,1)
    [Linear] [NoScaleOffset] [Tooltip(AO (R), Roughness (G), Metallic (B))] [Toggle(_MASKMAP)] _MaskMap ("Mask Map", 2D) = "white" {}
    [Indent] _Metallic ("Metallic", Range(0,1)) = 0
    _Roughness ("Roughness", Range(0,1)) = 0.5
    [UnIndent] _OcclusionStrength ("Occlusion", Range(0,1)) = 1
    [NoScaleOffset] [Normal] [ExtraProperty] [Toggle(_NORMALMAP)] _BumpMap ("Normal Map", 2D) = "bump" {}
    _BumpScale ("Normal Scale", Float) = 1

    _TriplanarScale ("Triplanar Scale", Float) = 1
    _TriplanarBlend ("Triplanar Blend", Float) = 5

    [Space(10)]
    _SpecularOcclusion ("Specular Occlusion", Range(0,1)) = 1
PROPERTIES_END


DEFINES_START
    // #define ATTRIBUTES_NEED_TEXCOORD0
    // #define VARYINGS_NEED_INTERP0

    // enable normalWS varying in shadowcaster as well to output alpha
    #define VARYINGS_NEED_NORMAL
    #define _NORMAL_DROPOFF_WS 1

    #define APPROXIMATE_AREALIGHT_SPECULAR
    #define UNITY_SPECCUBE_BOX_PROJECTION

    #pragma shader_feature_local _MASKMAP
    #pragma shader_feature_local _NORMALMAP
DEFINES_END


CBUFFER_START
    half4 _Color;
    float _TriplanarScale;
    half _Roughness;
    half _Metallic;
    half _BumpScale;
    half _SpecularOcclusion;
    half _OcclusionStrength;
    half _Cutoff;
    half _CutoutSharpness;
    half _TriplanarBlend;
CBUFFER_END


CODE_START

    TEXTURE2D(_MainTex);
    TEXTURE2D(_BumpMap);
    TEXTURE2D(_MaskMap);
    SAMPLER(sampler_MainTex);
    SAMPLER(sampler_BumpMap);
    SAMPLER(sampler_MaskMap);

    #define USE_MODIFYVARYINGS // Modify varyings at the end of vertex shader
    void ModifyVaryings(Attributes attributes, VertexDescription description, inout Varyings varyings)
    {
        
    }

    #define USE_SURFACEDESCRIPTION // SurfaceDescription: Albedo, Normal, Metallic, Emission, Smoothness, Occlusion, Alpha, AlphaClipThreshold, Reflectance
    void SurfaceDescriptionFunction(Varyings IN, inout SurfaceDescription surface)
    {
        float3 weight = max(pow(abs(IN.normalWS), _TriplanarBlend), 0);
        weight /= (weight.x + weight.y + weight.z).xxx;
        weight = saturate(weight);

        float3 scaledPosition = _TriplanarScale * IN.positionWS;
        float2 uvX, uvY, uvZ;
        GetTriplanarCoordinate(IN.positionWS * _TriplanarScale, uvY, uvZ, uvX);

        half4 albedo_X = 0, albedo_Y = 0, albedo_Z = 0;
        UNITY_BRANCH if (weight.x > 0) albedo_X = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, uvX);
        UNITY_BRANCH if (weight.y > 0) albedo_Y = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, uvY);
        UNITY_BRANCH if (weight.z > 0) albedo_Z = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, uvZ);
        float4 albedo = albedo_X * weight.x + albedo_Y * weight.y + albedo_Z * weight.z;
        albedo *= _Color;
        surface.Albedo = albedo.rgb;
        // surface.Albedo = 0;
        surface.Alpha = albedo.a;
        // surface.Smoothness = 0;

        // UDN blend from bgolus https://bgolus.medium.com/normal-mapping-for-a-triplanar-shader-10bf39dca05a#6d4d
        #ifdef _NORMALMAP

            // Tangent space normal maps
            half3 normalTSX = half3(0,0,1), normalTSY  = half3(0,0,1), normalTSZ = half3(0,0,1);
            UNITY_BRANCH if (weight.x > 0) normalTSX = UnpackNormalScale(SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, uvX), _BumpScale);
            UNITY_BRANCH if (weight.y > 0) normalTSY = UnpackNormalScale(SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, uvY), _BumpScale);
            UNITY_BRANCH if (weight.z > 0) normalTSZ = UnpackNormalScale(SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, uvZ), _BumpScale);

            // Swizzle world normals into tangent space and apply UDN blend.
            // These should get normalized, but it's very a minor visual
            // difference to skip it until after the blend.
            normalTSX = half3(normalTSX.xy + IN.normalWS.zy, IN.normalWS.x);
            normalTSY = half3(normalTSY.xy + IN.normalWS.xz, IN.normalWS.y);
            normalTSZ = half3(normalTSZ.xy + IN.normalWS.xy, IN.normalWS.z);

            // Swizzle tangent normals to match world orientation and triblend
            half3 worldNormal = normalTSX.zyx * weight.x + normalTSY.xzy * weight.y + normalTSZ.xyz * weight.z;
            surface.Normal = normalize(worldNormal);
        #else
            float renormFactor = 1.0 / max(FLT_MIN, length(IN.normalWS));
            surface.Normal = IN.normalWS * renormFactor;
        #endif

        #ifdef _MASKMAP
            half4 maskMap = SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, uv);
            surface.Metallic = maskMap.b * _Metallic;
            surface.Smoothness = 1.0 - (maskMap.g * _Roughness);
            surface.Occlusion = lerp(1.0, maskMap.r, _OcclusionStrength);
        #else
            surface.Metallic = _Metallic;
            surface.Smoothness = 1.0 - _Roughness;
        #endif

        surface.SpecularOcclusion = _SpecularOcclusion;

        surface.AlphaClipThreshold = _Cutoff;
        surface.AlphaClipSharpness = _CutoutSharpness;
    }

CODE_END

#include_optional "Assets/Settings/LitShaderConfig.litshader"
